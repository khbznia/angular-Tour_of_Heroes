	
# Creating Web API With ASP.NET Core Using Visual Studio Code
https://www.c-sharpcorner.com/article/creating-web-api-with-asp-net-core-using-visual-studio-code/
================================================================================
# How YOU can get started with .NET Core and C# in VS Code
https://softchris.github.io/pages/dotnet-core.html#resources
================================================================================
# Building Your First Web API with ASP.NET Core and Visual Studio Code
https://jasontaylor.dev/building-your-first-web-api-with-asp-net-core-and-visual-studio-code/
================================================================================
# Use MySql with .Net Core 3.1 & .NET 5 (Last line)
https://kunwar.dk/posts/use-mysql-for-dot-net-core
================================================================================
## YOUTUBE web api .net core 5 / Angularjs 11 visual studio
https://www.youtube.com/watch?v=S5dzfuh3t8U

## YOUTUBE // Core 5 vscode
https://www.youtube.com/watch?v=p_wUdWshYc8&t=4s
================================================================================
???? https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/
it seems that EF is used for database first and pushing the changes to the DB.

$ dotnet add package Microsoft.EntityFrameworkCore --version 5.0.5
================================================================================
DB management tools:
1. MySQL WorkBench
2. Dbeaver
3. oracle sql developer for linux
================================================================================
REF : https://blog.georgekosmidis.net/2020/07/15/using-mariadb-in-an-aspnet-core-api-with-entity-framework-core/

After we are done with the model, we should create a custom DbContext 
(let’s name it MariaDbContext) that inherits from Microsoft.EntityFrameworkCore.DbContext 
and lists our one and only WeatherForecastDataModel:
######### 
public partial class MariaDbContext : Microsoft.EntityFrameworkCore.DbContext
{
    public MariaDbContext(DbContextOptions<MariaDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<WeatherForecastDataModel> WeatherForecasts { get; set; }
}

######### Finally, let’s add the MariaDbContext as a scoped service to the DI Container:
public void ConfigureServices(IServiceCollection services)
{
    services.AddDbContextPool<MariaDbDbContext>(options => options
        .UseMySql(
            Configuration.GetConnectionString("MariaDbConnectionString"),
            mySqlOptions => mySqlOptions.ServerVersion(new Version(10, 5, 4), ServerType.MariaDb)
        )
    );
    
    services.AddControllers();
}
================================================================================
https://codewithshadman.com/repository-pattern-csharp/

using System.Data.Entity;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

class BaseRepository<TEntity> : IRepository <TEntity> where TEntity : class
{
    internal ApplicationContext context;
    internal DbSet<TEntity> dbSet;

    public BaseRepository(ApplicationContext context)
    {
        this.context = context;
        this.dbSet = context.Set<TEntity>();
    }

    public virtual IEnumerable<TEntity> GetWithRawSql(string query, 
        params object[] parameters)
    {
        return dbSet.SqlQuery(query, parameters).ToList();
    }

    public virtual IEnumerable<TEntity> Get(
        Expression<Func<TEntity, bool>> filter = null,
        Func<IQueryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null,
        string includeProperties = "")
    {
        IQueryable<TEntity> query = dbSet;

        if (filter != null)
        {
            query = query.Where(filter);
        }

        if (includeProperties != null)
        {
            foreach (var includeProperty in includeProperties.Split
            (new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
            {
                query = query.Include(includeProperty);
            }
        }
            

        if (orderBy != null)
        {
            return orderBy(query).ToList();
        }
        else
        {
            return query.ToList();
        }
    }

    public virtual TEntity GetByID(object id)
    {
        return dbSet.Find(id);
    }

    public virtual void Insert(TEntity entity)
    {
        dbSet.Add(entity);
    }

    public virtual void Delete(object id)
    {
        TEntity entityToDelete = dbSet.Find(id);
        Delete(entityToDelete);
    }

    public virtual void Delete(TEntity entityToDelete)
    {
        if (context.Entry(entityToDelete).State == EntityState.Detached)
        {
            dbSet.Attach(entityToDelete);
        }
        dbSet.Remove(entityToDelete);
    }

    public virtual void Update(TEntity entityToUpdate)
    {
        dbSet.Attach(entityToUpdate);
        context.Entry(entityToUpdate).State = EntityState.Modified;
    }
}


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

public interface IRepository<TEntity> where TEntity :class
{
    void Delete(TEntity entityToDelete);
    void Delete(object id);
    IEnumerable<TEntity> Get(
        Expression<Func<TEntity, bool>> filter = null, 
        Func<IQueryable<TEntity>, IOrderedQueryable<TEntity>> orderBy = null, 
        string includeProperties = "");
    TEntity GetByID(object id);
    IEnumerable<TEntity> GetWithRawSql(string query, 
        params object[] parameters);
    void Insert(TEntity entity);
    void Update(TEntity entityToUpdate);
}
=========================================
https://www.yworks.com/yed-live/
=========================================
To a kill a specific port in Linux use below command

sudo fuser -k Port_Number/tcp
=========================================















